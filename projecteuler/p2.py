"""
Each new term in the Fibonacci sequence is generated by adding the previous
two terms. By starting with 1 and 2, the first 10 terms will be:

1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...

By considering the terms in the Fibonacci sequence whose values do not
exceed four million, find the sum of the even-valued terms.

---
First version would be to keep computing the first and second, and add
up all the numbers that are divisible by 2 (even).

---
Second version would be by looking at the sequence of the numbers:
1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, ...
and observe that the even numbers that we want to add up are showing up
every third element. So we would need to add up only the third element.

Let's establish some relations (f: first, s: second, t: third):
f = 3
s = 5
t = 8

and our next iteration should be
f' = 13 = s + t
s' = 21 = t + f'
t' = 34 = f' + s'

---
In third version we look at the evens progression itself:
2, 8, 34, 144, ...

we observe that
2 = 2
8 = 2 + 6 = 2 + 3*2 + 0 = 4*2 + 0
34 = 8 + 26 = 8 + 3*8 + 2 = 4*8 + 2
144 = 34 + 110 = 34 + 3*34 + 8 = 4*34 + 8

or essentially said
x(n) = 4 * x(n-1) + x(n-2)
"""
from time import time


def get_result_v1(limit: int) -> int:
    first = 1
    second = 2
    result = 2
    while (second <= limit):
        next = first + second
        first = second
        second = next
        if next % 2 == 0:
            result += next

    return result


def get_result_v2(limit: int) -> int:
    first = 1
    second = 1
    third = first + second
    result = 0

    while (third <= limit):
        result += third
        first = second + third
        second = first + third
        third = first + second

    return result


def get_result_v3(limit: int) -> int:
    first = 2
    second = 8
    current = 4 * second + first

    result = first + second

    while current <= limit:
        result += current
        first = second
        second = current
        current = 4 * second + first

    return result


if __name__ == '__main__':
    N = 4_000_000  # answer 4613732
    BIG_N = 1_000_000_000_000_000  # answer 652484772464328

    # v1
    a = time()
    result = get_result_v1(N)
    b = time()
    print(f"R1: {result} [{b-a:.2f}s]")

    a = time()
    result = get_result_v1(BIG_N)
    b = time()
    print(f"R2: {result} [{b-a:.2f}s]\n")

    # v2
    a = time()
    result = get_result_v2(N)
    b = time()
    print(f"R3: {result} [{b-a:.2f}s]")

    a = time()
    result = get_result_v2(BIG_N)
    b = time()
    print(f"R4: {result} [{b-a:.2f}s]\n")

    # v3
    a = time()
    result = get_result_v3(N)
    b = time()
    print(f"R4: {result} [{b-a:.2f}s]")

    a = time()
    result = get_result_v3(BIG_N)
    b = time()
    print(f"R5: {result} [{b-a:.2f}s]\n")
